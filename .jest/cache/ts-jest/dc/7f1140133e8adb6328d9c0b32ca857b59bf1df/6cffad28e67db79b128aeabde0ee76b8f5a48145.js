import * as tslib_1 from "tslib";
import * as React from "react";
import { Component } from "react";
import { TouchableOpacity } from "react-native";
import styles from "./DateCalendarBox.style";
import { BusyIndicator, DateComponent } from "./IndividualComponents";
var DateCalendarBox = /** @class */ (function (_super) {
    tslib_1.__extends(DateCalendarBox, _super);
    function DateCalendarBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOnPress = function () {
            if (_this.props.date) {
                _this.props.dateBoxOnPressHandler(_this.props.date);
            }
        };
        return _this;
    }
    DateCalendarBox.prototype.render = function () {
        var dateComponentHeight = this.props.boxWidth * 0.6;
        var busyIndicatorHeight = this.props.boxWidth * 0.2;
        return (<TouchableOpacity style={[
            styles.touchableContainer,
            { height: this.props.boxWidth * 0.8, width: this.props.boxWidth }
        ]} onPress={this.handleOnPress}>
        <DateComponent date={this.props.date} isWeekend={this.props.isWeekend} isSelected={this.props.isSelected} dateFontSize={this.props.dateFontSize} dateComponentHeight={dateComponentHeight}/>
        <BusyIndicator whosBusy={this.props.whosBusy} height={busyIndicatorHeight}/>
      </TouchableOpacity>);
    };
    return DateCalendarBox;
}(Component));
export { DateCalendarBox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FrdXJuYWRpL1Byb2plY3RzL3JlYWN0LW5hdGl2ZS1zY2hlZHVsZXIvbGlicmFyeS9DYWxlbmRhck1vbnRoL0RhdGVDYWxlbmRhckJveC9EYXRlQ2FsZW5kYXJCb3gudHN4IiwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFBO0FBQ2pDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUUvQyxPQUFPLE1BQU0sTUFBTSx5QkFBeUIsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBWXJFO0lBQXFDLDJDQUF5QjtJQUE5RDtRQUFBLHFFQTRCQztRQTNCUSxtQkFBYSxHQUFHO1lBQ3JCLElBQUksS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ25CLEtBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUNsRDtRQUNILENBQUMsQ0FBQTs7SUF1QkgsQ0FBQztJQXJCUSxnQ0FBTSxHQUFiO1FBQ0UsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFDckQsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUE7UUFDckQsT0FBTyxDQUNMLENBQUMsZ0JBQWdCLENBQ2YsS0FBSyxDQUFDLENBQUM7WUFDTCxNQUFNLENBQUMsa0JBQWtCO1lBQ3pCLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7U0FBQyxDQUFDLENBQ3JFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FFNUI7UUFBQSxDQUFDLGFBQWEsQ0FDWixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUN0QixTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUNoQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUNsQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUN0QyxtQkFBbUIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBRTNDO1FBQUEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxFQUM1RTtNQUFBLEVBQUUsZ0JBQWdCLENBQUMsQ0FDcEIsQ0FBQTtJQUNILENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUE1QkQsQ0FBcUMsU0FBUyxHQTRCN0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FrdXJuYWRpL1Byb2plY3RzL3JlYWN0LW5hdGl2ZS1zY2hlZHVsZXIvbGlicmFyeS9DYWxlbmRhck1vbnRoL0RhdGVDYWxlbmRhckJveC9EYXRlQ2FsZW5kYXJCb3gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHsgRGF0ZU51bWJlciwgVXNlciB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxcIlxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9EYXRlQ2FsZW5kYXJCb3guc3R5bGVcIlxuaW1wb3J0IHsgQnVzeUluZGljYXRvciwgRGF0ZUNvbXBvbmVudCB9IGZyb20gXCIuL0luZGl2aWR1YWxDb21wb25lbnRzXCJcblxuaW50ZXJmYWNlIENvbXBvbmVudFByb3BzIHtcbiAgZGF0ZT86IERhdGVOdW1iZXJcbiAgaXNTZWxlY3RlZDogYm9vbGVhblxuICBpc1dlZWtlbmQ6IGJvb2xlYW5cbiAgYm94V2lkdGg6IG51bWJlclxuICBkYXRlRm9udFNpemU6IG51bWJlclxuICB3aG9zQnVzeTogVXNlcltdXG4gIGRhdGVCb3hPblByZXNzSGFuZGxlcjogKGRhdGU6IERhdGVOdW1iZXIpID0+IHZvaWRcbn1cblxuZXhwb3J0IGNsYXNzIERhdGVDYWxlbmRhckJveCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRQcm9wcz4ge1xuICBwdWJsaWMgaGFuZGxlT25QcmVzcyA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5kYXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmRhdGVCb3hPblByZXNzSGFuZGxlcih0aGlzLnByb3BzLmRhdGUpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpIHtcbiAgICBjb25zdCBkYXRlQ29tcG9uZW50SGVpZ2h0ID0gdGhpcy5wcm9wcy5ib3hXaWR0aCAqIDAuNlxuICAgIGNvbnN0IGJ1c3lJbmRpY2F0b3JIZWlnaHQgPSB0aGlzLnByb3BzLmJveFdpZHRoICogMC4yXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzLnRvdWNoYWJsZUNvbnRhaW5lcixcbiAgICAgICAgICB7IGhlaWdodDogdGhpcy5wcm9wcy5ib3hXaWR0aCAqIDAuOCwgd2lkdGg6IHRoaXMucHJvcHMuYm94V2lkdGggfV19XG4gICAgICAgIG9uUHJlc3M9e3RoaXMuaGFuZGxlT25QcmVzc31cbiAgICAgID5cbiAgICAgICAgPERhdGVDb21wb25lbnRcbiAgICAgICAgICBkYXRlPXt0aGlzLnByb3BzLmRhdGV9XG4gICAgICAgICAgaXNXZWVrZW5kPXt0aGlzLnByb3BzLmlzV2Vla2VuZH1cbiAgICAgICAgICBpc1NlbGVjdGVkPXt0aGlzLnByb3BzLmlzU2VsZWN0ZWR9XG4gICAgICAgICAgZGF0ZUZvbnRTaXplPXt0aGlzLnByb3BzLmRhdGVGb250U2l6ZX1cbiAgICAgICAgICBkYXRlQ29tcG9uZW50SGVpZ2h0PXtkYXRlQ29tcG9uZW50SGVpZ2h0fVxuICAgICAgICAvPlxuICAgICAgICA8QnVzeUluZGljYXRvciB3aG9zQnVzeT17dGhpcy5wcm9wcy53aG9zQnVzeX0gaGVpZ2h0PXtidXN5SW5kaWNhdG9ySGVpZ2h0fSAvPlxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgIClcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9