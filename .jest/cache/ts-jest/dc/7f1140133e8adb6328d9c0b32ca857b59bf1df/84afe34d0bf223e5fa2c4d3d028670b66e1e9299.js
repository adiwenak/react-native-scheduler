import * as tslib_1 from "tslib";
import moment from "moment";
import * as React from "react";
import { Component } from "react";
import { Image, Text, TouchableHighlight, View } from "react-native";
import { Month } from "../../shared/model";
import { styles } from "./MonthSelection.styles";
var MonthAsString;
(function (MonthAsString) {
    MonthAsString["January"] = "January";
    MonthAsString["February"] = "February";
    MonthAsString["March"] = "March";
    MonthAsString["April"] = "April";
    MonthAsString["May"] = "May";
    MonthAsString["June"] = "June";
    MonthAsString["July"] = "July";
    MonthAsString["August"] = "August";
    MonthAsString["September"] = "September";
    MonthAsString["October"] = "October";
    MonthAsString["November"] = "November";
    MonthAsString["December"] = "December";
})(MonthAsString || (MonthAsString = {}));
var MonthSelection = /** @class */ (function (_super) {
    tslib_1.__extends(MonthSelection, _super);
    function MonthSelection(props) {
        var _this = _super.call(this, props) || this;
        _this.allMonths = [MonthAsString.January, MonthAsString.February,
            MonthAsString.March, MonthAsString.April, MonthAsString.May,
            MonthAsString.June, MonthAsString.July, MonthAsString.August,
            MonthAsString.September, MonthAsString.October, MonthAsString.November, MonthAsString.December];
        _this.onMonthChange = function (month, year) {
            if (_this.props.onMonthChange) {
                _this.props.onMonthChange(month, year);
            }
        };
        _this.handlePreviousButtonPress = function () {
            var _a = _this.state, currentMonth = _a.currentMonth, currentYear = _a.currentYear;
            if (currentMonth > 0) {
                currentMonth -= 1;
            }
            else {
                currentYear -= 1;
                currentMonth = Month.December;
            }
            _this.setState({
                currentMonth: currentMonth,
                currentYear: currentYear
            });
            _this.onMonthChange(currentMonth, currentYear);
        };
        _this.handleNextButtonPress = function () {
            var _a = _this.state, currentMonth = _a.currentMonth, currentYear = _a.currentYear;
            if (currentMonth < _this.allMonths.length - 1) {
                currentMonth += 1;
            }
            else {
                currentYear += 1;
                currentMonth = Month.January;
            }
            _this.setState({
                currentMonth: currentMonth,
                currentYear: currentYear
            });
            _this.onMonthChange(currentMonth, currentYear);
        };
        _this.state = {
            currentMonth: props.currentMonth || Month.January,
            currentYear: props.currentYear || moment().year()
        };
        return _this;
    }
    MonthSelection.prototype.render = function () {
        var title = this.allMonths[this.state.currentMonth] + " " + this.state.currentYear;
        return (<View style={styles.container}>
                <TouchableHighlight onPress={this.handlePreviousButtonPress} accessibilityLabel={"button-month-prev"} style={[styles.containerButton, styles.containerButtonLeft]}>
                    <Image source={require("./asset/arrow-back.png")} resizeMode={"center"} style={styles.button}/>
                </TouchableHighlight>
                <View style={styles.containerTitle}>
                    <Text style={styles.title}>{title}</Text>
                </View>
                <TouchableHighlight onPress={this.handleNextButtonPress} accessibilityLabel={"button-month-next"} style={[styles.containerButton, styles.containerButtonRight]}>
                    <Image source={require("./asset/arrow-forward.png")} resizeMode={"center"} style={styles.button}/>
                </TouchableHighlight>
            </View>);
    };
    return MonthSelection;
}(Component));
export { MonthSelection };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,