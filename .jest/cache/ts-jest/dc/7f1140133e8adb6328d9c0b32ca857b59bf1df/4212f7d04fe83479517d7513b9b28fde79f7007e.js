import * as tslib_1 from "tslib";
import moment from "moment";
import * as React from "react";
import { View } from "react-native";
import { styles } from "./CalendarMonth.styles";
import { DateCalendarBox } from "./DateCalendarBox";
import { MonthSelection } from "./MonthSelection";
import { WeekDayHeader } from "./WeekDayHeader";
var nBoxToDateMapper = function (year, month, scheduleToUserMap, selectedDate) {
    var date = new Date(year, month, 1);
    var result = {};
    var startDayOfTheMonth = date.getDay();
    while (date.getMonth() === month) {
        var currentDay = date.getDay();
        var ms = date.getTime();
        var usersBusy = [];
        var isWeekend = false;
        var isSelected = date.getDate() === selectedDate;
        if (currentDay === 0 || currentDay === 6) {
            isWeekend = true;
        }
        if (scheduleToUserMap[ms]) {
            usersBusy = scheduleToUserMap[ms];
        }
        result[startDayOfTheMonth] = {
            dateNumber: date.getDate(),
            isWeekend: isWeekend,
            usersBusy: usersBusy,
            isSelected: isSelected
        };
        startDayOfTheMonth += 1;
        date.setDate(date.getDate() + 1);
    }
    return result;
};
var flattenTaskSchedule = function (data) {
    var mapped = {};
    data.forEach(function (value) {
        value.tasks.forEach(function (task) {
            var dateOnly = new Date(task.startTime.getFullYear(), task.startTime.getMonth(), task.startTime.getDate());
            var ms = dateOnly.getTime();
            var arrayUser = [];
            if (!mapped[ms]) {
                arrayUser = [];
            }
            else {
                arrayUser = mapped[ms].slice();
            }
            arrayUser.push(value.user);
            mapped[ms] = arrayUser;
        });
    });
    return mapped;
};
var CalendarMonth = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarMonth, _super);
    function CalendarMonth(props) {
        var _this = _super.call(this, props) || this;
        _this.boxes = 35;
        _this.containerOnLayout = function (event) {
            var dateBoxWidth = event.nativeEvent.layout.width / 7.01;
            _this.setState({ dateBoxWidth: dateBoxWidth });
        };
        _this.onMonthChange = function (month, year) {
            _this.setState({
                currentMonth: month,
                currentYear: year,
                selectedDate: undefined
            });
        };
        _this.onDatePress = function (date) {
            _this.setState({
                selectedDate: date
            });
        };
        var today = moment();
        _this.state = {
            dateBoxWidth: 0,
            currentMonth: today.month(),
            currentYear: today.year()
        };
        return _this;
    }
    CalendarMonth.prototype.generateBoxes = function (data) {
        var all = nBoxToDateMapper(this.state.currentYear, this.state.currentMonth, data, this.state.selectedDate);
        var n = 0;
        var els = [];
        while (n < this.boxes) {
            var obj = all[n];
            var el = void 0;
            if (obj) {
                el = (<DateCalendarBox key={"date-" + n} date={obj.dateNumber} boxWidth={this.state.dateBoxWidth} dateFontSize={13} isSelected={obj.isSelected} isWeekend={obj.isWeekend} whosBusy={obj.usersBusy} dateBoxOnPressHandler={this.onDatePress}/>);
            }
            else {
                el = (<DateCalendarBox key={"date-" + n} boxWidth={this.state.dateBoxWidth} dateFontSize={12} isSelected={false} isWeekend={false} whosBusy={[]} dateBoxOnPressHandler={this.onDatePress}/>);
            }
            els.push(el);
            n += 1;
        }
        return els;
    };
    CalendarMonth.prototype.render = function () {
        var indicator = {};
        if (this.props.data) {
            indicator = flattenTaskSchedule(this.props.data);
        }
        var boxes = this.generateBoxes(indicator);
        return (<View style={styles.container}>
                <View style={styles.containerMonthSelection}>
                    <MonthSelection onMonthChange={this.onMonthChange} currentMonth={this.state.currentMonth} currentYear={this.state.currentYear}/>
                </View>
                <View style={styles.containerWeekday}>
                    <WeekDayHeader />
                </View>
                <View onLayout={this.containerOnLayout} style={styles.containerDates}>
                    {boxes.map(function (value) {
            return value;
        })}
                </View>
            </View>);
    };
    return CalendarMonth;
}(React.Component));
export { CalendarMonth };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FrdXJuYWRpL1Byb2plY3RzL3JlYWN0LW5hdGl2ZS1zY2hlZHVsZXIvbGlicmFyeS9DYWxlbmRhck1vbnRoL0NhbGVuZGFyTW9udGgudHN4IiwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFDM0IsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxFQUFxQixJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBaUMvQyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsSUFBWSxFQUFFLEtBQWEsRUFDM0IsaUJBQW9DLEVBQ3BDLFlBQXlCO0lBQy9DLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDckMsSUFBTSxNQUFNLEdBQXVCLEVBQUUsQ0FBQTtJQUNyQyxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN0QyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLEVBQUU7UUFDOUIsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ2hDLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN6QixJQUFJLFNBQVMsR0FBVyxFQUFFLENBQUE7UUFDMUIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFBO1FBQ3JCLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxZQUFZLENBQUE7UUFDbEQsSUFBSSxVQUFVLEtBQUssQ0FBQyxJQUFJLFVB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QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FDakMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUM3QjtvQkFBQSxDQUNJLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLO1lBQ1osT0FBTyxLQUFLLENBQUE7UUFDaEIsQ0FBQyxDQUFDLENBRVY7Z0JBQUEsRUFBRSxJQUFJLENBQ1Y7WUFBQSxFQUFFLElBQUksQ0FBQyxDQUVWLENBQUE7SUFDTCxDQUFDO0lBZUwsb0JBQUM7QUFBRCxDQUFDLEFBeEdELENBQW1DLEtBQUssQ0FBQyxTQUFTLEdBd0dqRCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWt1cm5hZGkvUHJvamVjdHMvcmVhY3QtbmF0aXZlLXNjaGVkdWxlci9saWJyYXJ5L0NhbGVuZGFyTW9udGgvQ2FsZW5kYXJNb250aC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBMYXlvdXRDaGFuZ2VFdmVudCwgVmlldyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHsgRGF0ZU51bWJlciwgTW9udGgsIFRhc2ssIFVzZXIgfSBmcm9tIFwiLi4vc2hhcmVkL21vZGVsXCJcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gXCIuL0NhbGVuZGFyTW9udGguc3R5bGVzXCJcbmltcG9ydCB7IERhdGVDYWxlbmRhckJveCB9IGZyb20gXCIuL0RhdGVDYWxlbmRhckJveFwiXG5pbXBvcnQgeyBNb250aFNlbGVjdGlvbiB9IGZyb20gXCIuL01vbnRoU2VsZWN0aW9uXCJcbmltcG9ydCB7IFdlZWtEYXlIZWFkZXIgfSBmcm9tIFwiLi9XZWVrRGF5SGVhZGVyXCJcblxuZXhwb3J0IGludGVyZmFjZSBUYXNrQW5kVXNlciB7XG4gICAgdXNlcjogVXNlcixcbiAgICB0YXNrczogVGFza1tdXG59XG5cbmludGVyZmFjZSBDYWxlbmRhck1vbnRoUHJvcHMge1xuICAgIGRhdGE/OiBUYXNrQW5kVXNlcltdXG59XG5cbmludGVyZmFjZSBDYWxlbmRhck1vbnRoU3RhdGUge1xuICAgIGRhdGVCb3hXaWR0aDogbnVtYmVyLFxuICAgIHNlbGVjdGVkRGF0ZT86IERhdGVOdW1iZXIsXG4gICAgY3VycmVudE1vbnRoOiBNb250aCxcbiAgICBjdXJyZW50WWVhcjogbnVtYmVyLFxufVxuXG5pbnRlcmZhY2UgQm94VG9EYXRlTnVtYmVyTWFwIHtcbiAgICBba2V5OiBudW1iZXJdOiBEYXRlT2JqZWN0XG59XG5cbmludGVyZmFjZSBTY2hlZHVsZVRvVXNlck1hcCB7XG4gICAgW2tleTogbnVtYmVyXTogVXNlcltdXG59XG5cbmludGVyZmFjZSBEYXRlT2JqZWN0IHtcbiAgICBkYXRlTnVtYmVyOiBEYXRlTnVtYmVyXG4gICAgaXNXZWVrZW5kOiBib29sZWFuXG4gICAgdXNlcnNCdXN5OiBVc2VyW11cbiAgICBpc1NlbGVjdGVkOiBib29sZWFuXG59XG5cbmNvbnN0IG5Cb3hUb0RhdGVNYXBwZXIgPSAoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZVRvVXNlck1hcDogU2NoZWR1bGVUb1VzZXJNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGF0ZT86IERhdGVOdW1iZXIpOiBCb3hUb0RhdGVOdW1iZXJNYXAgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSlcbiAgICBjb25zdCByZXN1bHQ6IEJveFRvRGF0ZU51bWJlck1hcCA9IHt9XG4gICAgbGV0IHN0YXJ0RGF5T2ZUaGVNb250aCA9IGRhdGUuZ2V0RGF5KClcbiAgICB3aGlsZSAoZGF0ZS5nZXRNb250aCgpID09PSBtb250aCkge1xuICAgICAgICBjb25zdCBjdXJyZW50RGF5ID0gZGF0ZS5nZXREYXkoKVxuICAgICAgICBjb25zdCBtcyA9IGRhdGUuZ2V0VGltZSgpXG4gICAgICAgIGxldCB1c2Vyc0J1c3k6IFVzZXJbXSA9IFtdXG4gICAgICAgIGxldCBpc1dlZWtlbmQgPSBmYWxzZVxuICAgICAgICBjb25zdCBpc1NlbGVjdGVkID0gZGF0ZS5nZXREYXRlKCkgPT09IHNlbGVjdGVkRGF0ZVxuICAgICAgICBpZiAoY3VycmVudERheSA9PT0gMCB8fCBjdXJyZW50RGF5ID09PSA2KSB7XG4gICAgICAgICAgICBpc1dlZWtlbmQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2NoZWR1bGVUb1VzZXJNYXBbbXNdKSB7XG4gICAgICAgICAgICB1c2Vyc0J1c3kgPSBzY2hlZHVsZVRvVXNlck1hcFttc11cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdFtzdGFydERheU9mVGhlTW9udGhdID0ge1xuICAgICAgICAgICAgZGF0ZU51bWJlcjogZGF0ZS5nZXREYXRlKCkgYXMgRGF0ZU51bWJlcixcbiAgICAgICAgICAgIGlzV2Vla2VuZCxcbiAgICAgICAgICAgIHVzZXJzQnVzeSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0RGF5T2ZUaGVNb250aCArPSAxXG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDEpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuY29uc3QgZmxhdHRlblRhc2tTY2hlZHVsZSA9IChkYXRhOiBUYXNrQW5kVXNlcltdKTogU2NoZWR1bGVUb1VzZXJNYXAgPT4ge1xuICAgIGNvbnN0IG1hcHBlZDogU2NoZWR1bGVUb1VzZXJNYXAgPSB7fVxuICAgIGRhdGEuZm9yRWFjaCgodmFsdWU6IFRhc2tBbmRVc2VyKSA9PiB7XG4gICAgICAgIHZhbHVlLnRhc2tzLmZvckVhY2goKHRhc2s6IFRhc2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVPbmx5ID0gbmV3IERhdGUodGFzay5zdGFydFRpbWUuZ2V0RnVsbFllYXIoKSwgdGFzay5zdGFydFRpbWUuZ2V0TW9udGgoKSwgdGFzay5zdGFydFRpbWUuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgY29uc3QgbXMgPSBkYXRlT25seS5nZXRUaW1lKClcbiAgICAgICAgICAgIGxldCBhcnJheVVzZXI6IFVzZXJbXSA9IFtdXG4gICAgICAgICAgICBpZiAoIW1hcHBlZFttc10pIHtcbiAgICAgICAgICAgICAgICBhcnJheVVzZXIgPSBbXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVVzZXIgPSBbLi4ubWFwcGVkW21zXV1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJyYXlVc2VyLnB1c2godmFsdWUudXNlcilcbiAgICAgICAgICAgIG1hcHBlZFttc10gPSBhcnJheVVzZXJcbiAgICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIG1hcHBlZFxufVxuXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJNb250aCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxDYWxlbmRhck1vbnRoUHJvcHMsIENhbGVuZGFyTW9udGhTdGF0ZT4ge1xuICAgIHByaXZhdGUgYm94ZXMgPSAzNVxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBDYWxlbmRhck1vbnRoUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbW9tZW50KClcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRhdGVCb3hXaWR0aDogMCxcbiAgICAgICAgICAgIGN1cnJlbnRNb250aDogdG9kYXkubW9udGgoKSxcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyOiB0b2RheS55ZWFyKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlQm94ZXMoZGF0YTogU2NoZWR1bGVUb1VzZXJNYXApIHtcbiAgICAgICAgY29uc3QgYWxsID0gbkJveFRvRGF0ZU1hcHBlcih0aGlzLnN0YXRlLmN1cnJlbnRZZWFyLCB0aGlzLnN0YXRlLmN1cnJlbnRNb250aCxcbiAgICAgICAgICAgIGRhdGEsIHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlKVxuICAgICAgICBsZXQgbiA9IDBcbiAgICAgICAgY29uc3QgZWxzID0gW11cbiAgICAgICAgd2hpbGUgKG4gPCB0aGlzLmJveGVzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBhbGxbbl1cbiAgICAgICAgICAgIGxldCBlbFxuICAgICAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgICAgIGVsID0gKFxuICAgICAgICAgICAgICAgICAgICA8RGF0ZUNhbGVuZGFyQm94XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BkYXRlLSR7bn1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZT17b2JqLmRhdGVOdW1iZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBib3hXaWR0aD17dGhpcy5zdGF0ZS5kYXRlQm94V2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlRm9udFNpemU9ezEzfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZD17b2JqLmlzU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1dlZWtlbmQ9e29iai5pc1dlZWtlbmR9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aG9zQnVzeT17b2JqLnVzZXJzQnVzeX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVCb3hPblByZXNzSGFuZGxlcj17dGhpcy5vbkRhdGVQcmVzc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbCA9IChcbiAgICAgICAgICAgICAgICAgICAgPERhdGVDYWxlbmRhckJveFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtgZGF0ZS0ke259YH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJveFdpZHRoPXt0aGlzLnN0YXRlLmRhdGVCb3hXaWR0aH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVGb250U2l6ZT17MTJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzV2Vla2VuZD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aG9zQnVzeT17W119XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlQm94T25QcmVzc0hhbmRsZXI9e3RoaXMub25EYXRlUHJlc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVscy5wdXNoKGVsKVxuICAgICAgICAgICAgbiArPSAxXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxzXG4gICAgfVxuXG4gICAgY29udGFpbmVyT25MYXlvdXQgPSAoZXZlbnQ6IExheW91dENoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGVCb3hXaWR0aCA9IGV2ZW50Lm5hdGl2ZUV2ZW50LmxheW91dC53aWR0aCAvIDcuMDFcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZGF0ZUJveFdpZHRofSlcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcbiAgICAgICAgbGV0IGluZGljYXRvcjogU2NoZWR1bGVUb1VzZXJNYXAgPSB7fVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRhKSB7XG4gICAgICAgICAgICBpbmRpY2F0b3IgPSBmbGF0dGVuVGFza1NjaGVkdWxlKHRoaXMucHJvcHMuZGF0YSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib3hlcyA9IHRoaXMuZ2VuZXJhdGVCb3hlcyhpbmRpY2F0b3IpXG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lck1vbnRoU2VsZWN0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgPE1vbnRoU2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbk1vbnRoQ2hhbmdlPXt0aGlzLm9uTW9udGhDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9udGg9e3RoaXMuc3RhdGUuY3VycmVudE1vbnRofVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFllYXI9e3RoaXMuc3RhdGUuY3VycmVudFllYXJ9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyV2Vla2RheX0+XG4gICAgICAgICAgICAgICAgICAgIDxXZWVrRGF5SGVhZGVyIC8+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICAgICAgICAgIG9uTGF5b3V0PXt0aGlzLmNvbnRhaW5lck9uTGF5b3V0fVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmNvbnRhaW5lckRhdGVzfT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXMubWFwKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvVmlldyA+XG4gICAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgKVxuICAgIH1cblxuICAgIHByaXZhdGUgb25Nb250aENoYW5nZSA9IChtb250aDogTW9udGgsIHllYXI6IG51bWJlcikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnJlbnRNb250aDogbW9udGgsXG4gICAgICAgICAgICBjdXJyZW50WWVhcjogeWVhcixcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0ZTogdW5kZWZpbmVkXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRhdGVQcmVzcyA9IChkYXRlOiBEYXRlTnVtYmVyKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWREYXRlOiBkYXRlXG4gICAgICAgIH0pXG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9