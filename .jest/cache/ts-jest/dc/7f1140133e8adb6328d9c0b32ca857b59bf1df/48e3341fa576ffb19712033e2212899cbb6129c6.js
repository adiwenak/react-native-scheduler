import { shallow } from "enzyme";
import "jest";
import { default as React } from "react";
import "react-native";
import { create } from "react-test-renderer";
import { Month } from "../../shared/model";
import { MonthSelection } from "./MonthSelection";
describe("<MonthSelection />", function () {
    it("should render with given props", function () {
        var component = create(<MonthSelection currentYear={2017}/>).toJSON();
        expect(component).toMatchSnapshot();
    });
    it("should change current month or current year when previous button press", function () {
        var onChange = jest.fn();
        var component = shallow(<MonthSelection currentYear={2017} currentMonth={Month.February} onMonthChange={onChange}/>);
        console.log(component.dive());
        var button = component.dive().find({ accessibilityLabel: "button-month-prev" }).props();
        button.onPress();
        expect(onChange.mock.calls.length).toBe(1);
        expect(component.state("currentMonth")).toBe(Month.January);
        button.onPress();
        expect(onChange.mock.calls.length).toBe(2);
        expect(component.state("currentMonth")).toBe(Month.December);
        expect(component.state("currentYear")).toBe(2016);
    });
    it("should change current month or current year when next button press", function () {
        var onChange = jest.fn();
        var component = shallow(<MonthSelection currentYear={2017} currentMonth={Month.November} onMonthChange={onChange}/>);
        var button = component.dive().find({ accessibilityLabel: "button-month-next" }).props();
        button.onPress();
        expect(onChange.mock.calls.length).toBe(1);
        expect(component.state("currentMonth")).toBe(Month.December);
        button.onPress();
        expect(onChange.mock.calls.length).toBe(2);
        expect(component.state("currentMonth")).toBe(Month.January);
        expect(component.state("currentYear")).toBe(2018);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FrdXJuYWRpL1Byb2plY3RzL3JlYWN0LW5hdGl2ZS1zY2hlZHVsZXIvbGlicmFyeS9DYWxlbmRhck1vbnRoL01vbnRoU2VsZWN0aW9uL01vbnRoU2VsZWN0aW9uLnRlc3QudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDaEMsT0FBTyxNQUFNLENBQUE7QUFDYixPQUFPLEVBQUUsT0FBTyxJQUFJLEtBQUssRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUN4QyxPQUFPLGNBQWMsQ0FBQTtBQUNyQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDNUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUVqRCxRQUFRLENBQUMsb0JBQW9CLEVBQUU7SUFDM0IsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1FBQ2pDLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FDcEIsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyx3RUFBd0UsRUFBRTtRQUN6RSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7UUFDMUIsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUNyQixDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2hHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDN0IsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUN6RixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFM0QsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2hCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3JELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG9FQUFvRSxFQUFFO1FBQ3JFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQTtRQUMxQixJQUFNLFNBQVMsR0FBRyxPQUFPLENBQ3JCLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDaEcsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUV6RixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFNUQsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2hCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3JELENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FrdXJuYWRpL1Byb2plY3RzL3JlYWN0LW5hdGl2ZS1zY2hlZHVsZXIvbGlicmFyeS9DYWxlbmRhck1vbnRoL01vbnRoU2VsZWN0aW9uL01vbnRoU2VsZWN0aW9uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYWxsb3cgfSBmcm9tIFwiZW56eW1lXCJcbmltcG9ydCBcImplc3RcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBSZWFjdCB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcInJlYWN0LXRlc3QtcmVuZGVyZXJcIlxuaW1wb3J0IHsgTW9udGggfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21vZGVsXCJcbmltcG9ydCB7IE1vbnRoU2VsZWN0aW9uIH0gZnJvbSBcIi4vTW9udGhTZWxlY3Rpb25cIlxuXG5kZXNjcmliZShcIjxNb250aFNlbGVjdGlvbiAvPlwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgcmVuZGVyIHdpdGggZ2l2ZW4gcHJvcHNcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjcmVhdGUoXG4gICAgICAgICAgICA8TW9udGhTZWxlY3Rpb24gY3VycmVudFllYXI9ezIwMTd9Lz4pLnRvSlNPTigpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gICAgfSlcblxuICAgIGl0KFwic2hvdWxkIGNoYW5nZSBjdXJyZW50IG1vbnRoIG9yIGN1cnJlbnQgeWVhciB3aGVuIHByZXZpb3VzIGJ1dHRvbiBwcmVzc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9uQ2hhbmdlID0gamVzdC5mbigpXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHNoYWxsb3coXG4gICAgICAgICAgICA8TW9udGhTZWxlY3Rpb24gY3VycmVudFllYXI9ezIwMTd9IGN1cnJlbnRNb250aD17TW9udGguRmVicnVhcnl9IG9uTW9udGhDaGFuZ2U9e29uQ2hhbmdlfS8+KVxuICAgICAgICBjb25zb2xlLmxvZyhjb21wb25lbnQuZGl2ZSgpKVxuICAgICAgICBjb25zdCBidXR0b24gPSBjb21wb25lbnQuZGl2ZSgpLmZpbmQoeyBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiYnV0dG9uLW1vbnRoLXByZXZcIiB9KS5wcm9wcygpXG4gICAgICAgIGJ1dHRvbi5vblByZXNzKClcbiAgICAgICAgZXhwZWN0KG9uQ2hhbmdlLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUoXCJjdXJyZW50TW9udGhcIikpLnRvQmUoTW9udGguSmFudWFyeSlcblxuICAgICAgICBidXR0b24ub25QcmVzcygpXG4gICAgICAgIGV4cGVjdChvbkNoYW5nZS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgyKVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudE1vbnRoXCIpKS50b0JlKE1vbnRoLkRlY2VtYmVyKVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudFllYXJcIikpLnRvQmUoMjAxNilcbiAgICB9KVxuXG4gICAgaXQoXCJzaG91bGQgY2hhbmdlIGN1cnJlbnQgbW9udGggb3IgY3VycmVudCB5ZWFyIHdoZW4gbmV4dCBidXR0b24gcHJlc3NcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBvbkNoYW5nZSA9IGplc3QuZm4oKVxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBzaGFsbG93KFxuICAgICAgICAgICAgPE1vbnRoU2VsZWN0aW9uIGN1cnJlbnRZZWFyPXsyMDE3fSBjdXJyZW50TW9udGg9e01vbnRoLk5vdmVtYmVyfSBvbk1vbnRoQ2hhbmdlPXtvbkNoYW5nZX0vPilcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY29tcG9uZW50LmRpdmUoKS5maW5kKHsgYWNjZXNzaWJpbGl0eUxhYmVsOiBcImJ1dHRvbi1tb250aC1uZXh0XCIgfSkucHJvcHMoKVxuXG4gICAgICAgIGJ1dHRvbi5vblByZXNzKClcbiAgICAgICAgZXhwZWN0KG9uQ2hhbmdlLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUoXCJjdXJyZW50TW9udGhcIikpLnRvQmUoTW9udGguRGVjZW1iZXIpXG5cbiAgICAgICAgYnV0dG9uLm9uUHJlc3MoKVxuICAgICAgICBleHBlY3Qob25DaGFuZ2UubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMilcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5zdGF0ZShcImN1cnJlbnRNb250aFwiKSkudG9CZShNb250aC5KYW51YXJ5KVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudFllYXJcIikpLnRvQmUoMjAxOClcbiAgICB9KVxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==