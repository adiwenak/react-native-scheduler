{"version":3,"sources":["/Users/akurnadi/Projects/react-native-scheduler/library/CalendarMonth/DateCalendarBox/DateCalendarBox.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAYA,IAAA,eAAA,GAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAA,MAAA;;AAArC,WAAA,eAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACS,IAAA,KAAA,CAAA,aAAA,GAAgB,YAAA;AACrB,UAAI,KAAI,CAAC,KAAL,CAAW,IAAf,EAAqB;AACnB,QAAA,KAAI,CAAC,KAAL,CAAW,qBAAX,CAAiC,KAAI,CAAC,KAAL,CAAW,IAA5C;AACD;AACF,KAJM;;;AA2BR;;AArBQ,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,QAAM,mBAAmB,GAAG,KAAK,KAAL,CAAW,QAAX,GAAsB,GAAlD;AACA,QAAM,mBAAmB,GAAG,KAAK,KAAL,CAAW,QAAX,GAAsB,GAAlD;AACA,WACE,oBAAC,6BAAD;AACE,MAAA,KAAK,EAAE,CACL,yBAAO,kBADF,EAEL;AAAE,QAAA,MAAM,EAAE,KAAK,KAAL,CAAW,QAAX,GAAsB,GAAhC;AAAqC,QAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AAAvD,OAFK,CADT;AAIE,MAAA,OAAO,EAAE,KAAK;AAJhB,OAME,oBAAC,mCAAD;AACE,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,IADnB;AAEE,MAAA,SAAS,EAAE,KAAK,KAAL,CAAW,SAFxB;AAGE,MAAA,UAAU,EAAE,KAAK,KAAL,CAAW,UAHzB;AAIE,MAAA,YAAY,EAAE,KAAK,KAAL,CAAW,YAJ3B;AAKE,MAAA,mBAAmB,EAAE;AALvB,MANF,EAaE,oBAAC,mCAAD;AAAe,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAApC;AAA8C,MAAA,MAAM,EAAE;AAAtD,MAbF,CADF;AAiBD,GApBM;;AAqBT,SAAA,eAAA;AAAC,CA5BD,CAAqC,eAArC,CAAA","sourcesContent":["import * as React from \"react\"\nimport { Component } from \"react\"\nimport { TouchableOpacity } from \"react-native\"\nimport { DateNumber, User } from \"../../shared/model\"\nimport styles from \"./DateCalendarBox.style\"\nimport { BusyIndicator, DateComponent } from \"./IndividualComponents\"\n\ninterface ComponentProps {\n  date?: DateNumber\n  isSelected: boolean\n  isWeekend: boolean\n  boxWidth: number\n  dateFontSize: number\n  whosBusy: User[]\n  dateBoxOnPressHandler: (date: DateNumber) => void\n}\n\nexport class DateCalendarBox extends Component<ComponentProps> {\n  public handleOnPress = () => {\n    if (this.props.date) {\n      this.props.dateBoxOnPressHandler(this.props.date)\n    }\n  }\n\n  public render() {\n    const dateComponentHeight = this.props.boxWidth * 0.6\n    const busyIndicatorHeight = this.props.boxWidth * 0.2\n    return (\n      <TouchableOpacity\n        style={[\n          styles.touchableContainer,\n          { height: this.props.boxWidth * 0.8, width: this.props.boxWidth }]}\n        onPress={this.handleOnPress}\n      >\n        <DateComponent\n          date={this.props.date}\n          isWeekend={this.props.isWeekend}\n          isSelected={this.props.isSelected}\n          dateFontSize={this.props.dateFontSize}\n          dateComponentHeight={dateComponentHeight}\n        />\n        <BusyIndicator whosBusy={this.props.whosBusy} height={busyIndicatorHeight} />\n      </TouchableOpacity>\n    )\n  }\n}\n"]}