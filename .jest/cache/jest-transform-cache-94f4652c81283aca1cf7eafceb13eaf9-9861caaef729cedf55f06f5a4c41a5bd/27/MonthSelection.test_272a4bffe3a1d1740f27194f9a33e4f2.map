{"version":3,"sources":["/Users/akurnadi/Projects/react-native-scheduler/library/CalendarMonth/MonthSelection/MonthSelection.test.tsx"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,QAAQ,CAAC,oBAAD,EAAuB,YAAA;AAC3B,EAAA,EAAE,CAAC,gCAAD,EAAmC,YAAA;AACjC,QAAM,SAAS,GAAG,+BACd,6BAAC,8BAAD;AAAgB,MAAA,WAAW,EAAE;AAA7B,MADc,EACwB,MADxB,EAAlB;AAEA,IAAA,MAAM,CAAC,SAAD,CAAN,CAAkB,eAAlB;AACH,GAJC,CAAF;AAMA,EAAA,EAAE,CAAC,wEAAD,EAA2E,YAAA;AACzE,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,QAAM,SAAS,GAAG,qBACd,6BAAC,8BAAD;AAAgB,MAAA,WAAW,EAAE,IAA7B;AAAmC,MAAA,YAAY,EAAE,aAAM,QAAvD;AAAiE,MAAA,aAAa,EAAE;AAAhF,MADc,CAAlB;AAEA,IAAA,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,IAAV,EAAZ;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,IAAV,GAAiB,IAAjB,CAAsB;AAAE,MAAA,kBAAkB,EAAE;AAAtB,KAAtB,EAAmE,KAAnE,EAAf;AACA,IAAA,MAAM,CAAC,OAAP;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,MAArB,CAAN,CAAmC,IAAnC,CAAwC,CAAxC;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAD,CAAN,CAAwC,IAAxC,CAA6C,aAAM,OAAnD;AAEA,IAAA,MAAM,CAAC,OAAP;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,MAArB,CAAN,CAAmC,IAAnC,CAAwC,CAAxC;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAD,CAAN,CAAwC,IAAxC,CAA6C,aAAM,QAAnD;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,aAAhB,CAAD,CAAN,CAAuC,IAAvC,CAA4C,IAA5C;AACH,GAdC,CAAF;AAgBA,EAAA,EAAE,CAAC,oEAAD,EAAuE,YAAA;AACrE,QAAM,QAAQ,GAAG,IAAI,CAAC,EAAL,EAAjB;AACA,QAAM,SAAS,GAAG,qBACd,6BAAC,8BAAD;AAAgB,MAAA,WAAW,EAAE,IAA7B;AAAmC,MAAA,YAAY,EAAE,aAAM,QAAvD;AAAiE,MAAA,aAAa,EAAE;AAAhF,MADc,CAAlB;AAEA,QAAM,MAAM,GAAG,SAAS,CAAC,IAAV,GAAiB,IAAjB,CAAsB;AAAE,MAAA,kBAAkB,EAAE;AAAtB,KAAtB,EAAmE,KAAnE,EAAf;AAEA,IAAA,MAAM,CAAC,OAAP;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,MAArB,CAAN,CAAmC,IAAnC,CAAwC,CAAxC;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAD,CAAN,CAAwC,IAAxC,CAA6C,aAAM,QAAnD;AAEA,IAAA,MAAM,CAAC,OAAP;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,MAArB,CAAN,CAAmC,IAAnC,CAAwC,CAAxC;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,cAAhB,CAAD,CAAN,CAAwC,IAAxC,CAA6C,aAAM,OAAnD;AACA,IAAA,MAAM,CAAC,SAAS,CAAC,KAAV,CAAgB,aAAhB,CAAD,CAAN,CAAuC,IAAvC,CAA4C,IAA5C;AACH,GAdC,CAAF;AAeH,CAtCO,CAAR","sourcesContent":["import { shallow } from \"enzyme\"\nimport \"jest\"\nimport { default as React } from \"react\"\nimport \"react-native\"\nimport { create } from \"react-test-renderer\"\nimport { Month } from \"../../shared/model\"\nimport { MonthSelection } from \"./MonthSelection\"\n\ndescribe(\"<MonthSelection />\", () => {\n    it(\"should render with given props\", () => {\n        const component = create(\n            <MonthSelection currentYear={2017}/>).toJSON()\n        expect(component).toMatchSnapshot()\n    })\n\n    it(\"should change current month or current year when previous button press\", () => {\n        const onChange = jest.fn()\n        const component = shallow(\n            <MonthSelection currentYear={2017} currentMonth={Month.February} onMonthChange={onChange}/>)\n        console.log(component.dive())\n        const button = component.dive().find({ accessibilityLabel: \"button-month-prev\" }).props()\n        button.onPress()\n        expect(onChange.mock.calls.length).toBe(1)\n        expect(component.state(\"currentMonth\")).toBe(Month.January)\n\n        button.onPress()\n        expect(onChange.mock.calls.length).toBe(2)\n        expect(component.state(\"currentMonth\")).toBe(Month.December)\n        expect(component.state(\"currentYear\")).toBe(2016)\n    })\n\n    it(\"should change current month or current year when next button press\", () => {\n        const onChange = jest.fn()\n        const component = shallow(\n            <MonthSelection currentYear={2017} currentMonth={Month.November} onMonthChange={onChange}/>)\n        const button = component.dive().find({ accessibilityLabel: \"button-month-next\" }).props()\n\n        button.onPress()\n        expect(onChange.mock.calls.length).toBe(1)\n        expect(component.state(\"currentMonth\")).toBe(Month.December)\n\n        button.onPress()\n        expect(onChange.mock.calls.length).toBe(2)\n        expect(component.state(\"currentMonth\")).toBe(Month.January)\n        expect(component.state(\"currentYear\")).toBe(2018)\n    })\n})\n"]}