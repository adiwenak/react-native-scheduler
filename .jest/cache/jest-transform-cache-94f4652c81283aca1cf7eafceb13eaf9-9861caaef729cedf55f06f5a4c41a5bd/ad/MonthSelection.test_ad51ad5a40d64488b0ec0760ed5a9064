7acb86263de04f0bce7650653ad6f5d9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _enzyme = require("enzyme");

require("jest");

var _react = _interopRequireDefault(require("react"));

require("react-native");

var _reactTestRenderer = require("react-test-renderer");

var _model = require("../../shared/model");

var _MonthSelection = require("./MonthSelection");

describe("<MonthSelection />", function () {
  it("should render with given props", function () {
    var component = (0, _reactTestRenderer.create)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017
    })).toJSON();
    expect(component).toMatchSnapshot();
  });
  it("should change current month or current year when previous button press", function () {
    var onChange = jest.fn();
    var component = (0, _enzyme.shallow)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017,
      currentMonth: _model.Month.February,
      onMonthChange: onChange
    }));
    var button = component.find({
      accessibilityLabel: "button-month-prev"
    }).props();
    button.onPress();
    expect(onChange.mock.calls.length).toBe(1);
    expect(component.state("currentMonth")).toBe(_model.Month.January);
    button.onPress();
    expect(onChange.mock.calls.length).toBe(2);
    expect(component.state("currentMonth")).toBe(_model.Month.December);
    expect(component.state("currentYear")).toBe(2016);
  });
  it("should change current month or current year when next button press", function () {
    var onChange = jest.fn();
    var component = (0, _enzyme.shallow)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017,
      currentMonth: _model.Month.November,
      onMonthChange: onChange
    }));
    var button = component.find({
      accessibilityLabel: "button-month-next"
    }).props();
    button.onPress();
    expect(onChange.mock.calls.length).toBe(1);
    expect(component.state("currentMonth")).toBe(_model.Month.December);
    button.onPress();
    expect(onChange.mock.calls.length).toBe(2);
    expect(component.state("currentMonth")).toBe(_model.Month.January);
    expect(component.state("currentYear")).toBe(2018);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha3VybmFkaS9Qcm9qZWN0cy9yZWFjdC1uYXRpdmUtc2NoZWR1bGVyL2xpYnJhcnkvQ2FsZW5kYXJNb250aC9Nb250aFNlbGVjdGlvbi9Nb250aFNlbGVjdGlvbi50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFBO0FBQzNCLEVBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQUE7QUFDakMsUUFBTSxTQUFTLEdBQUcsK0JBQ2QsNkJBQUMsOEJBQUQ7QUFBZ0IsTUFBQSxXQUFXLEVBQUU7QUFBN0IsTUFEYyxFQUN3QixNQUR4QixFQUFsQjtBQUVBLElBQUEsTUFBTSxDQUFDLFNBQUQsQ0FBTixDQUFrQixlQUFsQjtBQUNILEdBSkMsQ0FBRjtBQU1BLEVBQUEsRUFBRSxDQUFDLHdFQUFELEVBQTJFLFlBQUE7QUFDekUsUUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBakI7QUFDQSxRQUFNLFNBQVMsR0FBRyxxQkFDZCw2QkFBQyw4QkFBRDtBQUFnQixNQUFBLFdBQVcsRUFBRSxJQUE3QjtBQUFtQyxNQUFBLFlBQVksRUFBRSxhQUFNLFFBQXZEO0FBQWlFLE1BQUEsYUFBYSxFQUFFO0FBQWhGLE1BRGMsQ0FBbEI7QUFFQSxRQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBVixDQUFlO0FBQUUsTUFBQSxrQkFBa0IsRUFBRTtBQUF0QixLQUFmLEVBQTRELEtBQTVELEVBQWY7QUFDQSxJQUFBLE1BQU0sQ0FBQyxPQUFQO0FBQ0EsSUFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVQsQ0FBYyxLQUFkLENBQW9CLE1BQXJCLENBQU4sQ0FBbUMsSUFBbkMsQ0FBd0MsQ0FBeEM7QUFDQSxJQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBVixDQUFnQixjQUFoQixDQUFELENBQU4sQ0FBd0MsSUFBeEMsQ0FBNkMsYUFBTSxPQUFuRDtBQUVBLElBQUEsTUFBTSxDQUFDLE9BQVA7QUFDQSxJQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLEtBQWQsQ0FBb0IsTUFBckIsQ0FBTixDQUFtQyxJQUFuQyxDQUF3QyxDQUF4QztBQUNBLElBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLGNBQWhCLENBQUQsQ0FBTixDQUF3QyxJQUF4QyxDQUE2QyxhQUFNLFFBQW5EO0FBQ0EsSUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsYUFBaEIsQ0FBRCxDQUFOLENBQXVDLElBQXZDLENBQTRDLElBQTVDO0FBQ0gsR0FiQyxDQUFGO0FBZUEsRUFBQSxFQUFFLENBQUMsb0VBQUQsRUFBdUUsWUFBQTtBQUNyRSxRQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBTCxFQUFqQjtBQUNBLFFBQU0sU0FBUyxHQUFHLHFCQUNkLDZCQUFDLDhCQUFEO0FBQWdCLE1BQUEsV0FBVyxFQUFFLElBQTdCO0FBQW1DLE1BQUEsWUFBWSxFQUFFLGFBQU0sUUFBdkQ7QUFBaUUsTUFBQSxhQUFhLEVBQUU7QUFBaEYsTUFEYyxDQUFsQjtBQUVBLFFBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFWLENBQWU7QUFBRSxNQUFBLGtCQUFrQixFQUFFO0FBQXRCLEtBQWYsRUFBNEQsS0FBNUQsRUFBZjtBQUVBLElBQUEsTUFBTSxDQUFDLE9BQVA7QUFDQSxJQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLEtBQWQsQ0FBb0IsTUFBckIsQ0FBTixDQUFtQyxJQUFuQyxDQUF3QyxDQUF4QztBQUNBLElBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLGNBQWhCLENBQUQsQ0FBTixDQUF3QyxJQUF4QyxDQUE2QyxhQUFNLFFBQW5EO0FBRUEsSUFBQSxNQUFNLENBQUMsT0FBUDtBQUNBLElBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFULENBQWMsS0FBZCxDQUFvQixNQUFyQixDQUFOLENBQW1DLElBQW5DLENBQXdDLENBQXhDO0FBQ0EsSUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsY0FBaEIsQ0FBRCxDQUFOLENBQXdDLElBQXhDLENBQTZDLGFBQU0sT0FBbkQ7QUFDQSxJQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBVixDQUFnQixhQUFoQixDQUFELENBQU4sQ0FBdUMsSUFBdkMsQ0FBNEMsSUFBNUM7QUFDSCxHQWRDLENBQUY7QUFlSCxDQXJDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvdyB9IGZyb20gXCJlbnp5bWVcIlxuaW1wb3J0IFwiamVzdFwiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFJlYWN0IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBcInJlYWN0LW5hdGl2ZVwiXG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tIFwicmVhY3QtdGVzdC1yZW5kZXJlclwiXG5pbXBvcnQgeyBNb250aCB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxcIlxuaW1wb3J0IHsgTW9udGhTZWxlY3Rpb24gfSBmcm9tIFwiLi9Nb250aFNlbGVjdGlvblwiXG5cbmRlc2NyaWJlKFwiPE1vbnRoU2VsZWN0aW9uIC8+XCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCByZW5kZXIgd2l0aCBnaXZlbiBwcm9wc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNyZWF0ZShcbiAgICAgICAgICAgIDxNb250aFNlbGVjdGlvbiBjdXJyZW50WWVhcj17MjAxN30vPikudG9KU09OKClcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudCkudG9NYXRjaFNuYXBzaG90KClcbiAgICB9KVxuXG4gICAgaXQoXCJzaG91bGQgY2hhbmdlIGN1cnJlbnQgbW9udGggb3IgY3VycmVudCB5ZWFyIHdoZW4gcHJldmlvdXMgYnV0dG9uIHByZXNzXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb25DaGFuZ2UgPSBqZXN0LmZuKClcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gc2hhbGxvdyhcbiAgICAgICAgICAgIDxNb250aFNlbGVjdGlvbiBjdXJyZW50WWVhcj17MjAxN30gY3VycmVudE1vbnRoPXtNb250aC5GZWJydWFyeX0gb25Nb250aENoYW5nZT17b25DaGFuZ2V9Lz4pXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNvbXBvbmVudC5maW5kKHsgYWNjZXNzaWJpbGl0eUxhYmVsOiBcImJ1dHRvbi1tb250aC1wcmV2XCIgfSkucHJvcHMoKVxuICAgICAgICBidXR0b24ub25QcmVzcygpXG4gICAgICAgIGV4cGVjdChvbkNoYW5nZS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudE1vbnRoXCIpKS50b0JlKE1vbnRoLkphbnVhcnkpXG5cbiAgICAgICAgYnV0dG9uLm9uUHJlc3MoKVxuICAgICAgICBleHBlY3Qob25DaGFuZ2UubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMilcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5zdGF0ZShcImN1cnJlbnRNb250aFwiKSkudG9CZShNb250aC5EZWNlbWJlcilcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5zdGF0ZShcImN1cnJlbnRZZWFyXCIpKS50b0JlKDIwMTYpXG4gICAgfSlcblxuICAgIGl0KFwic2hvdWxkIGNoYW5nZSBjdXJyZW50IG1vbnRoIG9yIGN1cnJlbnQgeWVhciB3aGVuIG5leHQgYnV0dG9uIHByZXNzXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb25DaGFuZ2UgPSBqZXN0LmZuKClcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gc2hhbGxvdyhcbiAgICAgICAgICAgIDxNb250aFNlbGVjdGlvbiBjdXJyZW50WWVhcj17MjAxN30gY3VycmVudE1vbnRoPXtNb250aC5Ob3ZlbWJlcn0gb25Nb250aENoYW5nZT17b25DaGFuZ2V9Lz4pXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNvbXBvbmVudC5maW5kKHsgYWNjZXNzaWJpbGl0eUxhYmVsOiBcImJ1dHRvbi1tb250aC1uZXh0XCIgfSkucHJvcHMoKVxuXG4gICAgICAgIGJ1dHRvbi5vblByZXNzKClcbiAgICAgICAgZXhwZWN0KG9uQ2hhbmdlLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUoXCJjdXJyZW50TW9udGhcIikpLnRvQmUoTW9udGguRGVjZW1iZXIpXG5cbiAgICAgICAgYnV0dG9uLm9uUHJlc3MoKVxuICAgICAgICBleHBlY3Qob25DaGFuZ2UubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMilcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5zdGF0ZShcImN1cnJlbnRNb250aFwiKSkudG9CZShNb250aC5KYW51YXJ5KVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudFllYXJcIikpLnRvQmUoMjAxOClcbiAgICB9KVxufSlcbiJdfQ==