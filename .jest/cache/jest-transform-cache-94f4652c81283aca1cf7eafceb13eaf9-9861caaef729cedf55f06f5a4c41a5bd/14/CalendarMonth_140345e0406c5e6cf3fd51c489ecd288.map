{"version":3,"sources":["/Users/akurnadi/Projects/react-native-scheduler/library/CalendarMonth/CalendarMonth.tsx"],"names":[],"mappings":"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","sourcesContent":["import moment from \"moment\"\nimport * as React from \"react\"\nimport { LayoutChangeEvent, View } from \"react-native\"\nimport { DateNumber, Month, Task, User } from \"../shared/model\"\nimport { styles } from \"./CalendarMonth.styles\"\nimport { DateCalendarBox } from \"./DateCalendarBox\"\nimport { MonthSelection } from \"./MonthSelection\"\nimport { WeekDayHeader } from \"./WeekDayHeader\"\n\nexport interface TaskAndUser {\n    user: User,\n    tasks: Task[]\n}\n\ninterface CalendarMonthProps {\n    data?: TaskAndUser[]\n}\n\ninterface CalendarMonthState {\n    dateBoxWidth: number,\n    selectedDate?: DateNumber,\n    currentMonth: Month,\n    currentYear: number,\n}\n\ninterface BoxToDateNumberMap {\n    [key: number]: DateObject\n}\n\ninterface ScheduleToUserMap {\n    [key: number]: User[]\n}\n\ninterface DateObject {\n    dateNumber: DateNumber\n    isWeekend: boolean\n    usersBusy: User[]\n    isSelected: boolean\n}\n\nconst nBoxToDateMapper = (year: number, month: number,\n                          scheduleToUserMap: ScheduleToUserMap,\n                          selectedDate?: DateNumber): BoxToDateNumberMap => {\n    const date = new Date(year, month, 1)\n    const result: BoxToDateNumberMap = {}\n    let startDayOfTheMonth = date.getDay()\n    while (date.getMonth() === month) {\n        const currentDay = date.getDay()\n        const ms = date.getTime()\n        let usersBusy: User[] = []\n        let isWeekend = false\n        const isSelected = date.getDate() === selectedDate\n        if (currentDay === 0 || currentDay === 6) {\n            isWeekend = true\n        }\n\n        if (scheduleToUserMap[ms]) {\n            usersBusy = scheduleToUserMap[ms]\n        }\n\n        result[startDayOfTheMonth] = {\n            dateNumber: date.getDate() as DateNumber,\n            isWeekend,\n            usersBusy,\n            isSelected\n        }\n\n        startDayOfTheMonth += 1\n        date.setDate(date.getDate() + 1)\n    }\n    return result\n}\n\nconst flattenTaskSchedule = (data: TaskAndUser[]): ScheduleToUserMap => {\n    const mapped: ScheduleToUserMap = {}\n    data.forEach((value: TaskAndUser) => {\n        value.tasks.forEach((task: Task) => {\n            const dateOnly = new Date(task.startTime.getFullYear(), task.startTime.getMonth(), task.startTime.getDate())\n            const ms = dateOnly.getTime()\n            let arrayUser: User[] = []\n            if (!mapped[ms]) {\n                arrayUser = []\n            } else {\n                arrayUser = [...mapped[ms]]\n            }\n\n            arrayUser.push(value.user)\n            mapped[ms] = arrayUser\n        })\n    })\n\n    return mapped\n}\n\nexport class CalendarMonth extends React.Component<CalendarMonthProps, CalendarMonthState> {\n    private boxes = 35\n    constructor(props: CalendarMonthProps) {\n        super(props)\n        const today = moment()\n        this.state = {\n            dateBoxWidth: 0,\n            currentMonth: today.month(),\n            currentYear: today.year()\n        }\n    }\n\n    generateBoxes(data: ScheduleToUserMap) {\n        const all = nBoxToDateMapper(this.state.currentYear, this.state.currentMonth,\n            data, this.state.selectedDate)\n        let n = 0\n        const els = []\n        while (n < this.boxes) {\n            const obj = all[n]\n            let el\n            if (obj) {\n                el = (\n                    <DateCalendarBox\n                        key={`date-${n}`}\n                        date={obj.dateNumber}\n                        boxWidth={this.state.dateBoxWidth}\n                        dateFontSize={13}\n                        isSelected={obj.isSelected}\n                        isWeekend={obj.isWeekend}\n                        whosBusy={obj.usersBusy}\n                        dateBoxOnPressHandler={this.onDatePress}\n                        />\n                )\n            } else {\n                el = (\n                    <DateCalendarBox\n                        key={`date-${n}`}\n                        boxWidth={this.state.dateBoxWidth}\n                        dateFontSize={12}\n                        isSelected={false}\n                        isWeekend={false}\n                        whosBusy={[]}\n                        dateBoxOnPressHandler={this.onDatePress}\n                        />\n                )\n            }\n            els.push(el)\n            n += 1\n        }\n\n        return els\n    }\n\n    containerOnLayout = (event: LayoutChangeEvent) => {\n        const dateBoxWidth = event.nativeEvent.layout.width / 7.01\n        this.setState({dateBoxWidth})\n    }\n\n    public render(): JSX.Element {\n        let indicator: ScheduleToUserMap = {}\n        if (this.props.data) {\n            indicator = flattenTaskSchedule(this.props.data)\n        }\n        const boxes = this.generateBoxes(indicator)\n\n        return (\n            <View style={styles.container}>\n                <View style={styles.containerMonthSelection}>\n                    <MonthSelection\n                        onMonthChange={this.onMonthChange}\n                        currentMonth={this.state.currentMonth}\n                        currentYear={this.state.currentYear}\n                    />\n                </View>\n                <View style={styles.containerWeekday}>\n                    <WeekDayHeader />\n                </View>\n                <View\n                    onLayout={this.containerOnLayout}\n                    style={styles.containerDates}>\n                    {\n                        boxes.map((value) => {\n                            return value\n                        })\n                    }\n                </View >\n            </View>\n\n        )\n    }\n\n    private onMonthChange = (month: Month, year: number) => {\n        this.setState({\n            currentMonth: month,\n            currentYear: year,\n            selectedDate: undefined\n        })\n    }\n\n    private onDatePress = (date: DateNumber) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n}\n"]}