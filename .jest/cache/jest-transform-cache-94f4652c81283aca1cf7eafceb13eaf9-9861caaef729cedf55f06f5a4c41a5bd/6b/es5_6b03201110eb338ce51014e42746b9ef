a7bf8f18a8e20677ebaad5271c842c16
'use strict';



var $Object = require('./GetIntrinsic')('%Object%');
var $TypeError = require('./GetIntrinsic')('%TypeError%');
var $String = require('./GetIntrinsic')('%String%');













var ES5 = {
  ToPrimitive: require('es-to-primitive/es5'),

  ToBoolean: function ToBoolean(value) {
    return !!value;
  },
  ToNumber: function ToNumber(value) {
    return +value;
  },
  ToInteger: function ToInteger(value) {
    var number = this.ToNumber(value);
    if (require('./helpers/isNaN')(number)) {return 0;}
    if (number === 0 || !require('./helpers/isFinite')(number)) {return number;}
    return require('./helpers/sign')(number) * Math.floor(Math.abs(number));
  },
  ToInt32: function ToInt32(x) {
    return this.ToNumber(x) >> 0;
  },
  ToUint32: function ToUint32(x) {
    return this.ToNumber(x) >>> 0;
  },
  ToUint16: function ToUint16(value) {
    var number = this.ToNumber(value);
    if (require('./helpers/isNaN')(number) || number === 0 || !require('./helpers/isFinite')(number)) {return 0;}
    var posInt = require('./helpers/sign')(number) * Math.floor(Math.abs(number));
    return require('./helpers/mod')(posInt, 0x10000);
  },
  ToString: function ToString(value) {
    return $String(value);
  },
  ToObject: function ToObject(value) {
    this.CheckObjectCoercible(value);
    return $Object(value);
  },
  CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {

    if (value == null) {
      throw new $TypeError(optMessage || 'Cannot call method on ' + value);
    }
    return value;
  },
  IsCallable: require('is-callable'),
  SameValue: function SameValue(x, y) {
    if (x === y) {
      if (x === 0) {return 1 / x === 1 / y;}
      return true;
    }
    return require('./helpers/isNaN')(x) && require('./helpers/isNaN')(y);
  },


  Type: function Type(x) {
    if (x === null) {
      return 'Null';
    }
    if (typeof x === 'undefined') {
      return 'Undefined';
    }
    if (typeof x === 'function' || typeof x === 'object') {
      return 'Object';
    }
    if (typeof x === 'number') {
      return 'Number';
    }
    if (typeof x === 'boolean') {
      return 'Boolean';
    }
    if (typeof x === 'string') {
      return 'String';
    }
  },


  IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
    if (this.Type(Desc) !== 'Object') {
      return false;
    }
    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true };


    for (var key in Desc) {
      if (require('has')(Desc, key) && !allowed[key]) {
        return false;
      }
    }

    var isData = require('has')(Desc, '[[Value]]');
    var IsAccessor = require('has')(Desc, '[[Get]]') || require('has')(Desc, '[[Set]]');
    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }
    return true;
  },


  IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    if (!this.IsPropertyDescriptor(Desc)) {
      throw new $TypeError('Desc must be a Property Descriptor');
    }

    if (!require('has')(Desc, '[[Get]]') && !require('has')(Desc, '[[Set]]')) {
      return false;
    }

    return true;
  },


  IsDataDescriptor: function IsDataDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    if (!this.IsPropertyDescriptor(Desc)) {
      throw new $TypeError('Desc must be a Property Descriptor');
    }

    if (!require('has')(Desc, '[[Value]]') && !require('has')(Desc, '[[Writable]]')) {
      return false;
    }

    return true;
  },


  IsGenericDescriptor: function IsGenericDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    if (!this.IsPropertyDescriptor(Desc)) {
      throw new $TypeError('Desc must be a Property Descriptor');
    }

    if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
      return true;
    }

    return false;
  },


  FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return Desc;
    }

    if (!this.IsPropertyDescriptor(Desc)) {
      throw new $TypeError('Desc must be a Property Descriptor');
    }

    if (this.IsDataDescriptor(Desc)) {
      return {
        value: Desc['[[Value]]'],
        writable: !!Desc['[[Writable]]'],
        enumerable: !!Desc['[[Enumerable]]'],
        configurable: !!Desc['[[Configurable]]'] };

    } else if (this.IsAccessorDescriptor(Desc)) {
      return {
        get: Desc['[[Get]]'],
        set: Desc['[[Set]]'],
        enumerable: !!Desc['[[Enumerable]]'],
        configurable: !!Desc['[[Configurable]]'] };

    } else {
      throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
    }
  },


  ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
    if (this.Type(Obj) !== 'Object') {
      throw new $TypeError('ToPropertyDescriptor requires an object');
    }

    var desc = {};
    if (require('has')(Obj, 'enumerable')) {
      desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
    }
    if (require('has')(Obj, 'configurable')) {
      desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
    }
    if (require('has')(Obj, 'value')) {
      desc['[[Value]]'] = Obj.value;
    }
    if (require('has')(Obj, 'writable')) {
      desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
    }
    if (require('has')(Obj, 'get')) {
      var getter = Obj.get;
      if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
        throw new TypeError('getter must be a function');
      }
      desc['[[Get]]'] = getter;
    }
    if (require('has')(Obj, 'set')) {
      var setter = Obj.set;
      if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
        throw new $TypeError('setter must be a function');
      }
      desc['[[Set]]'] = setter;
    }

    if ((require('has')(desc, '[[Get]]') || require('has')(desc, '[[Set]]')) && (require('has')(desc, '[[Value]]') || require('has')(desc, '[[Writable]]'))) {
      throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
    }
    return desc;
  } };


module.exports = ES5;