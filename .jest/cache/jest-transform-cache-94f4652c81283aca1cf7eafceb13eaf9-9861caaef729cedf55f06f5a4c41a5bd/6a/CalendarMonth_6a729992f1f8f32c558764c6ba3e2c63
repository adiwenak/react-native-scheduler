c679ff7632cd25270c1d10b900b70d7d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarMonth = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _moment = _interopRequireDefault(require("moment"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _CalendarMonth = require("./CalendarMonth.styles");

var _DateCalendarBox = require("./DateCalendarBox");

var _MonthSelection = require("./MonthSelection");

var _WeekDayHeader = require("./WeekDayHeader");

var nBoxToDateMapper = function nBoxToDateMapper(year, month, scheduleToUserMap, selectedDate) {
  var date = new Date(year, month, 1);
  var result = {};
  var startDayOfTheMonth = date.getDay();

  while (date.getMonth() === month) {
    var currentDay = date.getDay();
    var ms = date.getTime();
    var usersBusy = [];
    var isWeekend = false;
    var isSelected = date.getDate() === selectedDate;

    if (currentDay === 0 || currentDay === 6) {
      isWeekend = true;
    }

    if (scheduleToUserMap[ms]) {
      usersBusy = scheduleToUserMap[ms];
    }

    result[startDayOfTheMonth] = {
      dateNumber: date.getDate(),
      isWeekend: isWeekend,
      usersBusy: usersBusy,
      isSelected: isSelected
    };
    startDayOfTheMonth += 1;
    date.setDate(date.getDate() + 1);
  }

  return result;
};

var flattenTaskSchedule = function flattenTaskSchedule(data) {
  var mapped = {};
  data.forEach(function (value) {
    value.tasks.forEach(function (task) {
      var dateOnly = new Date(task.startTime.getFullYear(), task.startTime.getMonth(), task.startTime.getDate());
      var ms = dateOnly.getTime();
      var arrayUser = [];

      if (!mapped[ms]) {
        arrayUser = [];
      } else {
        arrayUser = mapped[ms].slice();
      }

      arrayUser.push(value.user);
      mapped[ms] = arrayUser;
    });
  });
  return mapped;
};

var CalendarMonth = function (_super) {
  tslib_1.__extends(CalendarMonth, _super);

  function CalendarMonth(props) {
    var _this = _super.call(this, props) || this;

    _this.boxes = 35;

    _this.containerOnLayout = function (event) {
      var dateBoxWidth = event.nativeEvent.layout.width / 7.01;

      _this.setState({
        dateBoxWidth: dateBoxWidth
      });
    };

    _this.onMonthChange = function (month, year) {
      _this.setState({
        currentMonth: month,
        currentYear: year,
        selectedDate: undefined
      });
    };

    _this.onDatePress = function (date) {
      _this.setState({
        selectedDate: date
      });
    };

    var today = (0, _moment.default)();
    _this.state = {
      dateBoxWidth: 0,
      currentMonth: today.month(),
      currentYear: today.year()
    };
    return _this;
  }

  CalendarMonth.prototype.generateBoxes = function (data) {
    var all = nBoxToDateMapper(this.state.currentYear, this.state.currentMonth, data, this.state.selectedDate);
    var n = 0;
    var els = [];

    while (n < this.boxes) {
      var obj = all[n];
      var el = void 0;

      if (obj) {
        el = React.createElement(_DateCalendarBox.DateCalendarBox, {
          key: "date-" + n,
          date: obj.dateNumber,
          boxWidth: this.state.dateBoxWidth,
          dateFontSize: 13,
          isSelected: obj.isSelected,
          isWeekend: obj.isWeekend,
          whosBusy: obj.usersBusy,
          dateBoxOnPressHandler: this.onDatePress
        });
      } else {
        el = React.createElement(_DateCalendarBox.DateCalendarBox, {
          key: "date-" + n,
          boxWidth: this.state.dateBoxWidth,
          dateFontSize: 12,
          isSelected: false,
          isWeekend: false,
          whosBusy: [],
          dateBoxOnPressHandler: this.onDatePress
        });
      }

      els.push(el);
      n += 1;
    }

    return els;
  };

  CalendarMonth.prototype.render = function () {
    var indicator = {};

    if (this.props.data) {
      indicator = flattenTaskSchedule(this.props.data);
    }

    var boxes = this.generateBoxes(indicator);
    return React.createElement(_reactNative.View, {
      style: _CalendarMonth.styles.container
    }, React.createElement(_reactNative.View, {
      style: _CalendarMonth.styles.containerMonthSelection
    }, React.createElement(_MonthSelection.MonthSelection, {
      onMonthChange: this.onMonthChange,
      currentMonth: this.state.currentMonth,
      currentYear: this.state.currentYear
    })), React.createElement(_reactNative.View, {
      style: _CalendarMonth.styles.containerWeekday
    }, React.createElement(_WeekDayHeader.WeekDayHeader, null)), React.createElement(_reactNative.View, {
      onLayout: this.containerOnLayout,
      style: _CalendarMonth.styles.containerDates
    }, boxes.map(function (value) {
      return value;
    })));
  };

  return CalendarMonth;
}(React.Component);

exports.CalendarMonth = CalendarMonth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,