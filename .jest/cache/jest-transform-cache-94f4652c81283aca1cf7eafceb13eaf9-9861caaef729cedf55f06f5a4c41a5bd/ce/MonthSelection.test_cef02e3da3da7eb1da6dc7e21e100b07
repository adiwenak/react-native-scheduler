5d720aeb3f383a7d0cb4a7811e72213c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _enzyme = require("enzyme");

require("jest");

var _react = _interopRequireDefault(require("react"));

require("react-native");

var _reactTestRenderer = require("react-test-renderer");

var _model = require("../../shared/model");

var _MonthSelection = require("./MonthSelection");

describe("<MonthSelection />", function () {
  it("should render with given props", function () {
    var component = (0, _reactTestRenderer.create)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017
    })).toJSON();
    expect(component).toMatchSnapshot();
  });
  it("should change current month or current year when previous button press", function () {
    var onChange = jest.fn();
    var component = (0, _enzyme.shallow)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017,
      currentMonth: _model.Month.February,
      onMonthChange: onChange
    }));
    var button = component.dive().find({
      accessibilityLabel: "button-month-prev"
    }).props();
    button.onPress();
    expect(onChange.mock.calls.length).toBe(1);
    expect(component.state("currentMonth")).toBe(_model.Month.January);
    button.onPress();
    expect(onChange.mock.calls.length).toBe(2);
    expect(component.state("currentMonth")).toBe(_model.Month.December);
    expect(component.state("currentYear")).toBe(2016);
  });
  it("should change current month or current year when next button press", function () {
    var onChange = jest.fn();
    var component = (0, _enzyme.shallow)(_react.default.createElement(_MonthSelection.MonthSelection, {
      currentYear: 2017,
      currentMonth: _model.Month.November,
      onMonthChange: onChange
    }));
    var button = component.dive().find({
      accessibilityLabel: "button-month-next"
    }).props();
    button.onPress();
    expect(onChange.mock.calls.length).toBe(1);
    expect(component.state("currentMonth")).toBe(_model.Month.December);
    button.onPress();
    expect(onChange.mock.calls.length).toBe(2);
    expect(component.state("currentMonth")).toBe(_model.Month.January);
    expect(component.state("currentYear")).toBe(2018);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ha3VybmFkaS9Qcm9qZWN0cy9yZWFjdC1uYXRpdmUtc2NoZWR1bGVyL2xpYnJhcnkvQ2FsZW5kYXJNb250aC9Nb250aFNlbGVjdGlvbi9Nb250aFNlbGVjdGlvbi50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFBO0FBQzNCLEVBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQUE7QUFDakMsUUFBTSxTQUFTLEdBQUcsK0JBQ2QsNkJBQUMsOEJBQUQ7QUFBZ0IsTUFBQSxXQUFXLEVBQUU7QUFBN0IsTUFEYyxFQUN3QixNQUR4QixFQUFsQjtBQUVBLElBQUEsTUFBTSxDQUFDLFNBQUQsQ0FBTixDQUFrQixlQUFsQjtBQUNILEdBSkMsQ0FBRjtBQU1BLEVBQUEsRUFBRSxDQUFDLHdFQUFELEVBQTJFLFlBQUE7QUFDekUsUUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUwsRUFBakI7QUFDQSxRQUFNLFNBQVMsR0FBRyxxQkFDZCw2QkFBQyw4QkFBRDtBQUFnQixNQUFBLFdBQVcsRUFBRSxJQUE3QjtBQUFtQyxNQUFBLFlBQVksRUFBRSxhQUFNLFFBQXZEO0FBQWlFLE1BQUEsYUFBYSxFQUFFO0FBQWhGLE1BRGMsQ0FBbEI7QUFFQSxRQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBVixHQUFpQixJQUFqQixDQUFzQjtBQUFFLE1BQUEsa0JBQWtCLEVBQUU7QUFBdEIsS0FBdEIsRUFBbUUsS0FBbkUsRUFBZjtBQUNBLElBQUEsTUFBTSxDQUFDLE9BQVA7QUFDQSxJQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLEtBQWQsQ0FBb0IsTUFBckIsQ0FBTixDQUFtQyxJQUFuQyxDQUF3QyxDQUF4QztBQUNBLElBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLGNBQWhCLENBQUQsQ0FBTixDQUF3QyxJQUF4QyxDQUE2QyxhQUFNLE9BQW5EO0FBRUEsSUFBQSxNQUFNLENBQUMsT0FBUDtBQUNBLElBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFULENBQWMsS0FBZCxDQUFvQixNQUFyQixDQUFOLENBQW1DLElBQW5DLENBQXdDLENBQXhDO0FBQ0EsSUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsY0FBaEIsQ0FBRCxDQUFOLENBQXdDLElBQXhDLENBQTZDLGFBQU0sUUFBbkQ7QUFDQSxJQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBVixDQUFnQixhQUFoQixDQUFELENBQU4sQ0FBdUMsSUFBdkMsQ0FBNEMsSUFBNUM7QUFDSCxHQWJDLENBQUY7QUFlQSxFQUFBLEVBQUUsQ0FBQyxvRUFBRCxFQUF1RSxZQUFBO0FBQ3JFLFFBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFMLEVBQWpCO0FBQ0EsUUFBTSxTQUFTLEdBQUcscUJBQ2QsNkJBQUMsOEJBQUQ7QUFBZ0IsTUFBQSxXQUFXLEVBQUUsSUFBN0I7QUFBbUMsTUFBQSxZQUFZLEVBQUUsYUFBTSxRQUF2RDtBQUFpRSxNQUFBLGFBQWEsRUFBRTtBQUFoRixNQURjLENBQWxCO0FBRUEsUUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQVYsR0FBaUIsSUFBakIsQ0FBc0I7QUFBRSxNQUFBLGtCQUFrQixFQUFFO0FBQXRCLEtBQXRCLEVBQW1FLEtBQW5FLEVBQWY7QUFFQSxJQUFBLE1BQU0sQ0FBQyxPQUFQO0FBQ0EsSUFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVQsQ0FBYyxLQUFkLENBQW9CLE1BQXJCLENBQU4sQ0FBbUMsSUFBbkMsQ0FBd0MsQ0FBeEM7QUFDQSxJQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBVixDQUFnQixjQUFoQixDQUFELENBQU4sQ0FBd0MsSUFBeEMsQ0FBNkMsYUFBTSxRQUFuRDtBQUVBLElBQUEsTUFBTSxDQUFDLE9BQVA7QUFDQSxJQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLEtBQWQsQ0FBb0IsTUFBckIsQ0FBTixDQUFtQyxJQUFuQyxDQUF3QyxDQUF4QztBQUNBLElBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLGNBQWhCLENBQUQsQ0FBTixDQUF3QyxJQUF4QyxDQUE2QyxhQUFNLE9BQW5EO0FBQ0EsSUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsYUFBaEIsQ0FBRCxDQUFOLENBQXVDLElBQXZDLENBQTRDLElBQTVDO0FBQ0gsR0FkQyxDQUFGO0FBZUgsQ0FyQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYWxsb3cgfSBmcm9tIFwiZW56eW1lXCJcbmltcG9ydCBcImplc3RcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBSZWFjdCB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcInJlYWN0LXRlc3QtcmVuZGVyZXJcIlxuaW1wb3J0IHsgTW9udGggfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21vZGVsXCJcbmltcG9ydCB7IE1vbnRoU2VsZWN0aW9uIH0gZnJvbSBcIi4vTW9udGhTZWxlY3Rpb25cIlxuXG5kZXNjcmliZShcIjxNb250aFNlbGVjdGlvbiAvPlwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgcmVuZGVyIHdpdGggZ2l2ZW4gcHJvcHNcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjcmVhdGUoXG4gICAgICAgICAgICA8TW9udGhTZWxlY3Rpb24gY3VycmVudFllYXI9ezIwMTd9Lz4pLnRvSlNPTigpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQpLnRvTWF0Y2hTbmFwc2hvdCgpXG4gICAgfSlcblxuICAgIGl0KFwic2hvdWxkIGNoYW5nZSBjdXJyZW50IG1vbnRoIG9yIGN1cnJlbnQgeWVhciB3aGVuIHByZXZpb3VzIGJ1dHRvbiBwcmVzc1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9uQ2hhbmdlID0gamVzdC5mbigpXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHNoYWxsb3coXG4gICAgICAgICAgICA8TW9udGhTZWxlY3Rpb24gY3VycmVudFllYXI9ezIwMTd9IGN1cnJlbnRNb250aD17TW9udGguRmVicnVhcnl9IG9uTW9udGhDaGFuZ2U9e29uQ2hhbmdlfS8+KVxuICAgICAgICBjb25zdCBidXR0b24gPSBjb21wb25lbnQuZGl2ZSgpLmZpbmQoeyBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiYnV0dG9uLW1vbnRoLXByZXZcIiB9KS5wcm9wcygpXG4gICAgICAgIGJ1dHRvbi5vblByZXNzKClcbiAgICAgICAgZXhwZWN0KG9uQ2hhbmdlLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUoXCJjdXJyZW50TW9udGhcIikpLnRvQmUoTW9udGguSmFudWFyeSlcblxuICAgICAgICBidXR0b24ub25QcmVzcygpXG4gICAgICAgIGV4cGVjdChvbkNoYW5nZS5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgyKVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudE1vbnRoXCIpKS50b0JlKE1vbnRoLkRlY2VtYmVyKVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudFllYXJcIikpLnRvQmUoMjAxNilcbiAgICB9KVxuXG4gICAgaXQoXCJzaG91bGQgY2hhbmdlIGN1cnJlbnQgbW9udGggb3IgY3VycmVudCB5ZWFyIHdoZW4gbmV4dCBidXR0b24gcHJlc3NcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBvbkNoYW5nZSA9IGplc3QuZm4oKVxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBzaGFsbG93KFxuICAgICAgICAgICAgPE1vbnRoU2VsZWN0aW9uIGN1cnJlbnRZZWFyPXsyMDE3fSBjdXJyZW50TW9udGg9e01vbnRoLk5vdmVtYmVyfSBvbk1vbnRoQ2hhbmdlPXtvbkNoYW5nZX0vPilcbiAgICAgICAgY29uc3QgYnV0dG9uID0gY29tcG9uZW50LmRpdmUoKS5maW5kKHsgYWNjZXNzaWJpbGl0eUxhYmVsOiBcImJ1dHRvbi1tb250aC1uZXh0XCIgfSkucHJvcHMoKVxuXG4gICAgICAgIGJ1dHRvbi5vblByZXNzKClcbiAgICAgICAgZXhwZWN0KG9uQ2hhbmdlLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpXG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuc3RhdGUoXCJjdXJyZW50TW9udGhcIikpLnRvQmUoTW9udGguRGVjZW1iZXIpXG5cbiAgICAgICAgYnV0dG9uLm9uUHJlc3MoKVxuICAgICAgICBleHBlY3Qob25DaGFuZ2UubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMilcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5zdGF0ZShcImN1cnJlbnRNb250aFwiKSkudG9CZShNb250aC5KYW51YXJ5KVxuICAgICAgICBleHBlY3QoY29tcG9uZW50LnN0YXRlKFwiY3VycmVudFllYXJcIikpLnRvQmUoMjAxOClcbiAgICB9KVxufSlcbiJdfQ==