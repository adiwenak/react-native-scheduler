8ee099f3636605701da8d8b0d5f38ca7










'use strict';var _jsxFileName = "/Users/akurnadi/Projects/react-native-scheduler/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";





























var AndroidScrollView;
var AndroidHorizontalScrollContentView;
var AndroidHorizontalScrollView;
var RCTScrollView;
var RCTScrollContentView;

if (require("../../Utilities/Platform").OS === 'android') {
  AndroidScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  AndroidHorizontalScrollView = require("../../ReactNative/requireNativeComponent")(
  'AndroidHorizontalScrollView');

  AndroidHorizontalScrollContentView = require("../../ReactNative/requireNativeComponent")(
  'AndroidHorizontalScrollContentView');

} else if (require("../../Utilities/Platform").OS === 'ios') {
  RCTScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  RCTScrollContentView = require("../../ReactNative/requireNativeComponent")('RCTScrollContentView');
} else {
  RCTScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  RCTScrollContentView = require("../../ReactNative/requireNativeComponent")('RCTScrollContentView');
}





















































































































































































































































































































































































































































































var ScrollView = require('create-react-class')({
  displayName: 'ScrollView',
  mixins: [require("../ScrollResponder").Mixin],

  _scrollAnimatedValue: new (require("../../Animated/src/AnimatedImplementation").Value)(
  0),

  _scrollAnimatedValueAttachment: null,
  _stickyHeaderRefs: new Map(),
  _headerLayoutYs: new Map(),
  getInitialState: function getInitialState() {
    return require("@babel/runtime/helpers/objectSpread")({},
    this.scrollResponderMixinGetInitialState(), {
      layoutHeight: null });

  },

  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    this._scrollAnimatedValue = new (require("../../Animated/src/AnimatedImplementation").Value)(
    this.props.contentOffset ? this.props.contentOffset.y : 0);

    this._scrollAnimatedValue.setOffset(
    this.props.contentInset ? this.props.contentInset.top : 0);

    this._stickyHeaderRefs = new Map();
    this._headerLayoutYs = new Map();
  },

  componentDidMount: function componentDidMount() {
    this._updateAnimatedNodeAttachment();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateAnimatedNodeAttachment();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },







  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return require("../../Renderer/shims/ReactNative").findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return require("../../Renderer/shims/ReactNative").findNodeHandle(this._innerViewRef);
  },












  scrollTo: function scrollTo(
  y,
  x,
  animated)
  {
    if (typeof y === 'number') {
      console.warn(
      '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +
      'animated: true})` instead.');

    } else {var _ref =
      y || {};x = _ref.x;y = _ref.y;animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({
      x: x || 0,
      y: y || 0,
      animated: animated !== false });

  },









  scrollToEnd: function scrollToEnd(options) {

    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated });

  },




  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    console.warn(
    '`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');

    this.scrollTo({ x: x, y: y, animated: false });
  },






  flashScrollIndicators: function flashScrollIndicators() {
    this.getScrollResponder().scrollResponderFlashScrollIndicators();
  },

  _getKeyForIndex: function _getKeyForIndex(index, childArray) {

    var child = childArray[index];
    return child && child.key;
  },

  _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
    if (
    this.props.stickyHeaderIndices &&
    this.props.stickyHeaderIndices.length > 0)
    {
      this._scrollAnimatedValueAttachment = require("../../Animated/src/AnimatedImplementation").attachNativeEvent(
      this._scrollViewRef,
      'onScroll',
      [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);

    }
  },

  _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
    if (ref) {
      this._stickyHeaderRefs.set(key, ref);
    } else {
      this._stickyHeaderRefs.delete(key);
    }
  },

  _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
    if (!this.props.stickyHeaderIndices) {
      return;
    }
    var childArray = require('react').Children.toArray(this.props.children);
    if (key !== this._getKeyForIndex(index, childArray)) {

      return;
    }

    var layoutY = event.nativeEvent.layout.y;
    this._headerLayoutYs.set(key, layoutY);

    var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
    var previousHeaderIndex = this.props.stickyHeaderIndices[
    indexOfIndex - 1];

    if (previousHeaderIndex != null) {
      var previousHeader = this._stickyHeaderRefs.get(
      this._getKeyForIndex(previousHeaderIndex, childArray));

      previousHeader && previousHeader.setNextHeaderY(layoutY);
    }
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (
      this.props.onScroll &&
      this.props.scrollEventThrottle == null &&
      require("../../Utilities/Platform").OS === 'ios')
      {
        console.log(
        'You specified `onScroll` on a <ScrollView> but not ' +
        '`scrollEventThrottle`. You will only receive one event. ' +
        'Using `16` you get all the events but be aware that it may ' +
        "cause frame drops, use a bigger number if you don't need as " +
        'much precision.');

      }
    }
    if (require("../../Utilities/Platform").OS === 'android') {
      if (
      this.props.keyboardDismissMode === 'on-drag' &&
      this.state.isTouching)
      {
        require("../../Utilities/dismissKeyboard")();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleLayout: function _handleLayout(e) {
    if (this.props.invertStickyHeaders) {
      this.setState({ layoutHeight: e.nativeEvent.layout.height });
    }
    if (this.props.onLayout) {
      this.props.onLayout(e);
    }
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {var _e$nativeEvent$layout =
    e.nativeEvent.layout,width = _e$nativeEvent$layout.width,height = _e$nativeEvent$layout.height;
    this.props.onContentSizeChange &&
    this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {var _this = this;
    var ScrollViewClass;
    var ScrollContentContainerViewClass;
    if (require("../../Utilities/Platform").OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
      } else {
        ScrollViewClass = AndroidScrollView;
        ScrollContentContainerViewClass = require("../View/View");
      }
    } else {
      ScrollViewClass = RCTScrollView;
      ScrollContentContainerViewClass = RCTScrollContentView;
    }

    require('fbjs/lib/invariant')(
    ScrollViewClass !== undefined,
    'ScrollViewClass must not be undefined');


    require('fbjs/lib/invariant')(
    ScrollContentContainerViewClass !== undefined,
    'ScrollContentContainerViewClass must not be undefined');


    var contentContainerStyle = [
    this.props.horizontal && styles.contentContainerHorizontal,
    this.props.contentContainerStyle];

    if (__DEV__ && this.props.style) {
      var style = require("../../StyleSheet/flattenStyle")(this.props.style);
      var childLayoutProps = ['alignItems', 'justifyContent'].filter(
      function (prop) {return style && style[prop] !== undefined;});

      require('fbjs/lib/invariant')(
      childLayoutProps.length === 0,
      'ScrollView child layout (' +
      JSON.stringify(childLayoutProps) +
      ') must be applied through the contentContainerStyle prop.');

    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout };

    }var

    stickyHeaderIndices = this.props.stickyHeaderIndices;
    var hasStickyHeaders =
    stickyHeaderIndices && stickyHeaderIndices.length > 0;
    var childArray =
    hasStickyHeaders && require('react').Children.toArray(this.props.children);
    var children = hasStickyHeaders ?

    childArray.map(function (child, index) {
      var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
      if (indexOfIndex > -1) {
        var key = child.key;
        var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
        return (
          require('react').createElement(require("./ScrollViewStickyHeader"), {
            key: key,
            ref: function ref(_ref2) {return _this._setStickyHeaderRef(key, _ref2);},
            nextHeaderLayoutY: _this._headerLayoutYs.get(
            _this._getKeyForIndex(nextIndex, childArray)),

            onLayout: function onLayout(event) {return (
                _this._onStickyHeaderLayout(index, event, key));},

            scrollAnimatedValue: _this._scrollAnimatedValue,
            inverted: _this.props.invertStickyHeaders,
            scrollViewHeight: _this.state.layoutHeight, __source: { fileName: _jsxFileName, lineNumber: 831 } },
          child));


      } else {
        return child;
      }
    }) :
    this.props.children;
    var contentContainer =
    require('react').createElement(ScrollContentContainerViewClass, require("@babel/runtime/helpers/extends")({},
    contentSizeChangeProps, {

      ref: this._setInnerViewRef,
      style: contentContainerStyle,
      removeClippedSubviews:


      require("../../Utilities/Platform").OS === 'android' && hasStickyHeaders ?
      false :
      this.props.removeClippedSubviews,

      collapsable: false, __source: { fileName: _jsxFileName, lineNumber: 852 } }),
    children);



    var alwaysBounceHorizontal =
    this.props.alwaysBounceHorizontal !== undefined ?
    this.props.alwaysBounceHorizontal :
    this.props.horizontal;

    var alwaysBounceVertical =
    this.props.alwaysBounceVertical !== undefined ?
    this.props.alwaysBounceVertical :
    !this.props.horizontal;

    var DEPRECATED_sendUpdatedChildFrames = !!this.props.
    DEPRECATED_sendUpdatedChildFrames;

    var baseStyle = this.props.horizontal ?
    styles.baseHorizontal :
    styles.baseVertical;
    var props = require("@babel/runtime/helpers/objectSpread")({},
    this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],


      onContentSizeChange: null,
      onLayout: this._handleLayout,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderReject: this.scrollResponderHandleResponderReject,
      onResponderRelease: this.scrollResponderHandleResponderRelease,

      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderTerminationRequest: this.
      scrollResponderHandleTerminationRequest,
      onScroll: this._handleScroll,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onScrollShouldSetResponder: this.
      scrollResponderHandleScrollShouldSetResponder,
      onStartShouldSetResponder: this.
      scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.
      scrollResponderHandleStartShouldSetResponderCapture,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchCancel: this.scrollResponderHandleTouchCancel,
      scrollBarThumbImage: require("../../Image/resolveAssetSource")(this.props.scrollBarThumbImage),
      scrollEventThrottle: hasStickyHeaders ?
      1 :
      this.props.scrollEventThrottle,
      sendMomentumEvents:
      this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ?
      true :
      false,
      DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,

      pagingEnabled: require("../../Utilities/Platform").select({

        ios:
        this.props.pagingEnabled &&
        this.props.snapToInterval == null &&
        this.props.snapToOffsets == null,

        android:
        this.props.pagingEnabled ||
        this.props.snapToInterval != null ||
        this.props.snapToOffsets != null }) });var



    decelerationRate = this.props.decelerationRate;
    if (decelerationRate != null) {
      props.decelerationRate = require("./processDecelerationRate")(decelerationRate);
    }

    var refreshControl = this.props.refreshControl;

    if (refreshControl) {
      if (require("../../Utilities/Platform").OS === 'ios') {


        return (
          require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 952 } }),
          require("../../Utilities/Platform").isTV ? null : refreshControl,
          contentContainer));


      } else if (require("../../Utilities/Platform").OS === 'android') {






        return require('react').cloneElement(
        refreshControl,
        { style: props.style },
        require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({},
        props, {
          style: baseStyle,
          ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 967 } }),
        contentContainer));


      }
    }
    return (
      require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 977 } }),
      contentContainer));


  } });


var TypedScrollView = ScrollView;



var styles = require("../../StyleSheet/StyleSheet").create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll' },

  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll' },

  contentContainerHorizontal: {
    flexDirection: 'row' } });



module.exports = TypedScrollView;