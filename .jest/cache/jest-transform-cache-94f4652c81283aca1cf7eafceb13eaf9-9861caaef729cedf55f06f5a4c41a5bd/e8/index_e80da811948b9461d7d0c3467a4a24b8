b6ea09971e43159001057b4764c92bb0










var INFINITY = 1 / 0,
MAX_SAFE_INTEGER = 9007199254740991;


var argsTag = '[object Arguments]',
funcTag = '[object Function]',
genTag = '[object GeneratorFunction]';


var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;


var freeSelf = typeof self == 'object' && self && self.Object === Object && self;


var root = freeGlobal || freeSelf || Function('return this')();









function arrayPush(array, values) {
  var index = -1,
  length = values.length,
  offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}


var objectProto = Object.prototype;


var hasOwnProperty = objectProto.hasOwnProperty;






var objectToString = objectProto.toString;


var Symbol = root.Symbol,
propertyIsEnumerable = objectProto.propertyIsEnumerable,
spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;












function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
  length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {

        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}








function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
  !!(spreadableSymbol && value && value[spreadableSymbol]);
}















function flattenDeep(array) {
  var length = array ? array.length : 0;
  return length ? baseFlatten(array, INFINITY) : [];
}



















function isArguments(value) {

  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (
  !propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
























var isArray = Array.isArray;


























function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}


























function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}


















function isFunction(value) {


  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}



























function isLength(value) {
  return typeof value == 'number' &&
  value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}


























function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

























function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = flattenDeep;