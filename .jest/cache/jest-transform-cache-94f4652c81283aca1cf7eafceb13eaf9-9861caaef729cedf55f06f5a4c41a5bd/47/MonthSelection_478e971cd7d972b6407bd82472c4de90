04caef61b9449e148ebf53c3c294e3fc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonthSelection = void 0;

var tslib_1 = _interopRequireWildcard(require("tslib"));

var _moment = _interopRequireDefault(require("moment"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _model = require("../../shared/model");

var _MonthSelection = require("./MonthSelection.styles");

var MonthAsString;

(function (MonthAsString) {
  MonthAsString["January"] = "January";
  MonthAsString["February"] = "February";
  MonthAsString["March"] = "March";
  MonthAsString["April"] = "April";
  MonthAsString["May"] = "May";
  MonthAsString["June"] = "June";
  MonthAsString["July"] = "July";
  MonthAsString["August"] = "August";
  MonthAsString["September"] = "September";
  MonthAsString["October"] = "October";
  MonthAsString["November"] = "November";
  MonthAsString["December"] = "December";
})(MonthAsString || (MonthAsString = {}));

var MonthSelection = function (_super) {
  tslib_1.__extends(MonthSelection, _super);

  function MonthSelection(props) {
    var _this = _super.call(this, props) || this;

    _this.allMonths = [MonthAsString.January, MonthAsString.February, MonthAsString.March, MonthAsString.April, MonthAsString.May, MonthAsString.June, MonthAsString.July, MonthAsString.August, MonthAsString.September, MonthAsString.October, MonthAsString.November, MonthAsString.December];

    _this.onMonthChange = function (month, year) {
      if (_this.props.onMonthChange) {
        _this.props.onMonthChange(month, year);
      }
    };

    _this.handlePreviousButtonPress = function () {
      var _a = _this.state,
          currentMonth = _a.currentMonth,
          currentYear = _a.currentYear;

      if (currentMonth > 0) {
        currentMonth -= 1;
      } else {
        currentYear -= 1;
        currentMonth = _model.Month.December;
      }

      _this.setState({
        currentMonth: currentMonth,
        currentYear: currentYear
      });

      _this.onMonthChange(currentMonth, currentYear);
    };

    _this.handleNextButtonPress = function () {
      var _a = _this.state,
          currentMonth = _a.currentMonth,
          currentYear = _a.currentYear;

      if (currentMonth < _this.allMonths.length - 1) {
        currentMonth += 1;
      } else {
        currentYear += 1;
        currentMonth = _model.Month.January;
      }

      _this.setState({
        currentMonth: currentMonth,
        currentYear: currentYear
      });

      _this.onMonthChange(currentMonth, currentYear);
    };

    _this.state = {
      currentMonth: props.currentMonth || _model.Month.January,
      currentYear: props.currentYear || (0, _moment.default)().year()
    };
    return _this;
  }

  MonthSelection.prototype.render = function () {
    var title = this.allMonths[this.state.currentMonth] + " " + this.state.currentYear;
    return React.createElement(_reactNative.View, {
      style: _MonthSelection.styles.container
    }, React.createElement(_reactNative.TouchableHighlight, {
      onPress: this.handlePreviousButtonPress,
      accessibilityLabel: "button-month-prev",
      style: [_MonthSelection.styles.containerButton, _MonthSelection.styles.containerButtonLeft]
    }, React.createElement(_reactNative.Image, {
      source: require("./asset/arrow-back.png"),
      resizeMode: "center",
      style: _MonthSelection.styles.button
    })), React.createElement(_reactNative.View, {
      style: _MonthSelection.styles.containerTitle
    }, React.createElement(_reactNative.Text, {
      style: _MonthSelection.styles.title
    }, title)), React.createElement(_reactNative.TouchableHighlight, {
      onPress: this.handleNextButtonPress,
      accessibilityLabel: "button-month-next",
      style: [_MonthSelection.styles.containerButton, _MonthSelection.styles.containerButtonRight]
    }, React.createElement(_reactNative.Image, {
      source: require("./asset/arrow-forward.png"),
      resizeMode: "center",
      style: _MonthSelection.styles.button
    })));
  };

  return MonthSelection;
}(React.Component);

exports.MonthSelection = MonthSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,